// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    displayName     String?
    username        String?   @unique
    bio             String?
    role            String @default("user")
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    coverImage      String?
    profileImage    String?
    avatarShape     String?
    hashedPassword  String?
    birthday        DateTime?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    Following       Follower[]  @relation("UserFollows")
    Followers       Follower[]  @relation("UserFollowed")
    hasNotification Boolean?

    posts         Post[]
    comments      Comment[]
    notifications Notification[]
}

model Follower {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  followerId    String
  createdAt     DateTime @default(now())

  User          User   @relation(fields: [userId], references: [id], name: "UserFollows")
  Follower      User   @relation(fields: [followerId], references: [id], name: "UserFollowed")
}

model Post {
    id                 String @id @default(auto()) @map("_id") @db.ObjectId
    body               String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    userId             String @db.ObjectId
    likedIds           String[] @db.ObjectId
    image              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    comments          Comment[]
}

model Comment {
    id                 String @id @default(auto()) @map("_id") @db.ObjectId
    body               String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    userId             String @db.ObjectId
    postId             String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
    id                 String @id @default(auto()) @map("_id") @db.ObjectId
    body               String
    userId             String @db.ObjectId
    createdAt          DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}